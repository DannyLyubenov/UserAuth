
import java.io.*;
import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import javax.swing.*;


public class Login extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public Login () {

        try {
            this.cipher = Cipher.getInstance ("DESede/CBC/PKCS5Padding");

            createDefaultAdmin ();
        } catch ( Exception e ) {
            e.printStackTrace ();
        }

        initComponents ();
        loadFromFile ();
        integrity ();
    }

    ArrayList<User> arrUser = new ArrayList<> ();
    ArrayList<String> encArr = new ArrayList<> ();
    ArrayList<String> decArr = new ArrayList<> ();

    Cipher cipher;
    byte[] encryptKey = "0yRevERvBN8CgYEAoozQh/d1RCv/h/+s9C7K9BBP3p94KL6+yft902j+XbKvySVKPumUNHG2mi/qW4X3KgCfT69FDapa2TjIsqlOJl3oElYT2t4KUinTH51ycXgEGjva".getBytes ();
    IvParameterSpec IvParameters = new IvParameterSpec (new byte[] { 12 , 34 , 56 , 78 , 90 , 87 , 65 , 43 });

    String question;
    String answer;
    int errorNumber = 0;
    Calendar now = Calendar.getInstance ();
    int time1 = now.get (Calendar.MINUTE);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings ( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txbUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txbPass = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        lblHash = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");
        setPreferredSize(new java.awt.Dimension(900, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Username");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 220, -1, -1));

        txbUser.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txbUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txbUserActionPerformed(evt);
            }
        });
        getContentPane().add(txbUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 220, 90, -1));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Password");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 270, -1, -1));

        txbPass.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        getContentPane().add(txbPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 270, 90, -1));

        btnLogin.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        getContentPane().add(btnLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 320, 190, -1));

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReset.setText("Reset Password");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        getContentPane().add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 370, 190, -1));

        lblHash.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblHash.setForeground(new java.awt.Color(255, 51, 102));
        lblHash.setText("jLabel3");
        getContentPane().add(lblHash, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txbUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txbUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txbUserActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed

        String strUser = txbUser.getText ();
        String strPass = txbPass.getText ();
        String savedPass = "";
        boolean isUser = false;
        boolean isPass = false;
        boolean isAdmin = false;
        int userIndex = 0;

        //------------------Testing for regular username and password
        //starting from index 1 are the users with limited privileges
        for ( int i = 1; i < arrUser.size (); i ++ ) {
            if ( arrUser.get (i).getUserName ().equals (strUser) ) {

                isUser = true;
                userIndex = i;
                savedPass = arrUser.get (i).getPassword ();
                if ( BCrypt.checkpw (strPass , savedPass) ) {

                    System.out.println ("match");
                    isPass = true;
                } else if (  ! BCrypt.checkpw (strPass , savedPass) ) {

                    errorNumber = errorNumber + 1;

                }
            }
        }

        //----------------------Login as a regular user
        if ( ( ( isUser ) && ( isPass ) ) ) {
            UserMenu um = new UserMenu (arrUser , userIndex , question , answer);
            System.out.println ("index: " + userIndex);
            um.setVisible (true);
            um.setSize (900 , 600);
            um.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
            this.dispose ();
        }

        //----------------------Login as admin
        //index 0 has admin privileges
        if ( ( arrUser.get (0).getUserName ().equals (strUser) ) ) {
            String savedAdminPass = arrUser.get (0).getPassword ();
            if ( BCrypt.checkpw (strPass , savedAdminPass) ) {
                isAdmin = true;
                AdminMenu um = new AdminMenu (arrUser , userIndex , encArr , decArr);
                System.out.println ("index: " + userIndex);
                um.setVisible (true);
                um.setSize (900 , 600);
                um.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
                this.dispose ();
            }
        }

        //----------------------Error message if password and username don't match
        if (  ! ( ( ( arrUser.get (0).getUserName ().equals (strUser) ) && ( isAdmin ) ) || ( ( isUser ) && ( isPass ) ) ) ) {
            JOptionPane.showMessageDialog (null , "Wrong Credentials" , "Error" , JOptionPane.ERROR_MESSAGE);
        }

        if ( errorNumber >= 3 ) {

            JOptionPane.showMessageDialog (null , "Too Many Wrong Entries, Program Blocked" , "Error" , JOptionPane.ERROR_MESSAGE);
            txbUser.setEditable (false);
            txbPass.setEditable (false);
            btnLogin.setEnabled (false);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed

        Reset reset = new Reset (arrUser);
        reset.setVisible (true);
        reset.setSize (900 , 600);
        reset.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        this.dispose ();


    }//GEN-LAST:event_btnResetActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        /*
            Change File Permission
         */
        File shadow = new File ("shadow.txt");
        File integrity = new File ("integrity.txt");

        shadow.setExecutable (false);
        shadow.setReadable (false);
        shadow.setWritable (false);

        integrity.setExecutable (false);
        integrity.setReadable (false);
        integrity.setWritable (false);
    }//GEN-LAST:event_formWindowClosing

    public void loadFromFile () {
        //Integrity label
        lblHash.setVisible (false);

        /*
            Change File Permission
         */
        File shadow = new File ("shadow.txt");
        File integrity = new File ("integrity.txt");

        shadow.setExecutable (true);
        shadow.setReadable (true);
        shadow.setWritable (true);

        integrity.setExecutable (true);
        integrity.setReadable (true);
        integrity.setWritable (true);

        try {
            //--------Decode
            DESedeKeySpec spec = new DESedeKeySpec (encryptKey);
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance ("DESede");
            SecretKey theKey = keyFactory.generateSecret (spec);
            cipher.init (Cipher.DECRYPT_MODE , theKey , IvParameters);

            //---------load the encrypted data into an ArrayList encArr
            Scanner input = new Scanner (new BufferedReader (new FileReader ("shadow.txt")));
            while ( input.hasNextLine () ) {
                encArr.add (input.next ());
                input.nextLine ();
            }
            input.close ();

            /*
                load each index into a string which then to be decoded in Base64 byte array
                apply the symetric encryption algorithm and parse it into a new string
                add that string to an ArrayList decArr
             */
            for ( int i = 0; i < encArr.size (); i ++ ) {
                String encArrIndex = encArr.get (i);
                byte[] base64Dec = Base64.getDecoder ().decode (encArrIndex);
                byte[] plaintext = cipher.doFinal (base64Dec);
                String decArrIndex = new String (plaintext);
                decArr.add (decArrIndex);
            }


            /*
                Decompose the ArrayList
             */
            for ( int i = 0; i < decArr.size (); i ++ ) {
                String decArrIndex = decArr.get (i);
                String arrSplit[] = decArrIndex.split (",");
                String name = arrSplit[ 0 ];
                String username = arrSplit[ 1 ];
                String password = arrSplit[ 2 ];
                String rePass = arrSplit[ 3 ];
                String question = arrSplit[ 4 ];
                String answer = arrSplit[ 5 ];
                arrUser.add (new User (name , username , password , rePass , question , answer));
            }
            for ( int i = 0; i < arrUser.size (); i ++ ) {
                System.out.println ("loading file: " + arrUser.get (i).getName ());
            }

        } catch ( Exception e ) {
            System.out.println ("not working");
        }
    }

    public void integrity () {
        String shadowHash = "";
        String integrityHash = "";
        try {
            /*
            Hashing the file
             */
            Register reg = new Register ();
            String line = "";
            shadowHash = reg.generateHash ();

            //-----------------Reading from a file
            BufferedReader br = new BufferedReader (new FileReader (new File ("integrity.txt")));
            while ( ( line = br.readLine () ) != null ) {
                integrityHash += line;
            }
            br.close ();
        } catch ( Exception e ) {
            System.out.println ("not working");
        }

        System.out.println ("shadow: " + shadowHash);
        System.out.println ("integrity: " + integrityHash);

        if (  ! shadowHash.equals (integrityHash) ) {
            lblHash.setText ("File Compromised");
            lblHash.setVisible (true);
        }
    }

    public void createDefaultAdmin () throws FileNotFoundException {
        /*
            Change File Permission
         */
        File shadow = new File ("shadow.txt");
        File integrity = new File ("integrity.txt");

        try {
            if (  ! ( shadow.exists () && shadow.isFile () ) ) {
                PrintWriter shadowF = new PrintWriter ("shadow.txt");
                String adminInfo = "pvA2kdi+SqW6CUf2Fehh6WcZiK7I2cogScxCYq/6l7ufF+LSxO+C/pVzk3GXzVknD1gZSD1HzxRbkvxUw8KLqd4vLWv46V5OCQ/97XMXtRpAX8DdJi2gKyoZ3l2sXTpjrsZueTSS5w1XXK/fL7yl2Wenn/hmoaTlkCA2nGBAQ6YsTBnoTtd9DDxF95AEqqY0D/P0/N2EFNdJv/xfWWeMglB4wwOj4Ewj5PvDe49HK4g=";
                shadow.setExecutable (false);
                shadow.setReadable (false);
                shadow.setWritable (true);
                shadowF.println (adminInfo);
                shadowF.close ();

                PrintWriter integrityF = new PrintWriter ("integrity.txt");
                String adminHash = "MFaecBxgvTw5t/mlfwzuQ45TsNN16DCGNlUAVbQAoxs=";
                integrity.setExecutable (false);
                integrity.setReadable (false);
                integrity.setWritable (false);

                integrityF.println (adminHash);
                integrityF.close ();
            }
        } catch ( Exception e ) {
            e.printStackTrace ();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels () ) {
                if ( "Nimbus".equals (info.getName ()) ) {
                    javax.swing.UIManager.setLookAndFeel (info.getClassName ());
                    break;

                }
            }
        } catch ( ClassNotFoundException ex ) {
            java.util.logging.Logger.getLogger (Login.class
                      .getName ()).log (java.util.logging.Level.SEVERE , null , ex);

        } catch ( InstantiationException ex ) {
            java.util.logging.Logger.getLogger (Login.class
                      .getName ()).log (java.util.logging.Level.SEVERE , null , ex);

        } catch ( IllegalAccessException ex ) {
            java.util.logging.Logger.getLogger (Login.class
                      .getName ()).log (java.util.logging.Level.SEVERE , null , ex);

        } catch ( javax.swing.UnsupportedLookAndFeelException ex ) {
            java.util.logging.Logger.getLogger (Login.class
                      .getName ()).log (java.util.logging.Level.SEVERE , null , ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater (new Runnable () {
            public void run () {
                new Login ().setVisible (true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblHash;
    private javax.swing.JPasswordField txbPass;
    private javax.swing.JTextField txbUser;
    // End of variables declaration//GEN-END:variables
}
